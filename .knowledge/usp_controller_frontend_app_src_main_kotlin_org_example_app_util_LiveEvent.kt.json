{"is_source_file": true, "format": "Kotlin", "description": "This file defines a custom live event class 'LiveEvent' that extends MutableLiveData to provide single-consumption event capabilities in Android's Lifecycle-aware components. It wraps the observer to ensure the event is handled only once, resetting the value after a change.", "external_files": ["androidx.lifecycle.LifecycleOwner", "androidx.lifecycle.MutableLiveData", "androidx.lifecycle.Observer"], "external_methods": ["Observer.onChanged()", "MutableLiveData.observe()", "MutableLiveData.removeObserver()"], "published": ["org.example.app.util.LiveEvent"], "classes": [{"name": "LiveEvent", "description": "A subclass of MutableLiveData designed for single-use events, preventing multiple observer notifications for the same event."}], "methods": [{"name": "observe", "description": "Overrides the default observe method to wrap the observer in a way that resets the LiveData value after the event is handled, ensuring single consumption."}, {"name": "removeObserver", "description": "Removes the observer, handling both wrapped and original observer references."}], "calls": ["super.observe()", "super.removeObserver()", "observer.onChanged()"], "search-terms": ["LiveEvent", "single-consumption", "MutableLiveData", "Android lifecycle", "custom LiveData"], "state": 2, "file_id": 18, "knowledge_revision": 38, "git_revision": "", "hash": "3a8af83f725c641f13cd58ec0baa1ca6", "format-version": 4, "code-base-name": "usp_controller_frontend", "filename": "usp_controller_frontend/app/src/main/kotlin/org/example/app/util/LiveEvent.kt", "revision_history": [{"38": ""}]}