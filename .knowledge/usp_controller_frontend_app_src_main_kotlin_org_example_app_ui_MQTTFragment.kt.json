{"is_source_file": true, "format": "Kotlin", "description": "This Kotlin source file defines an Android Fragment class 'MQTTFragment' that implements a user interface for controlling MQTT connections, subscriptions, publishing messages, and displaying logs. It includes UI setup, event handling, and a ViewModel nested class for managing MQTT connection state and logs.", "external_files": ["org.example.app.R", "org.example.app.data.ConfigStore", "org.example.app.net.mqtt.MqttManager", "org.example.app.util.LogEntry"], "external_methods": ["ViewModelProvider.get", "ViewModel.onCleared", "ConfigStore.load", "MqttManager.applyConfig", "MqttManager.connect", "MqttManager.disconnect", "MqttManager.subscribe", "MqttManager.unsubscribe", "MqttManager.publish", "Snackbar.make", "getString"], "published": ["MQTTFragment"], "classes": [{"name": "MQTTFragment", "description": "An Android Fragment providing a UI for MQTT controls and logs. Handles UI initialization, user interactions for MQTT operations, and observes MQTT connection and log state changes."}, {"name": "MQTTFragment.MqttVM", "description": "ViewModel subclass managing MQTT connection, subscription, publishing, and log data. Ensures lifecycle-aware resource management for MQTT connection."}], "methods": [{"name": "onCreateView", "description": "Inflates the fragment's layout from XML."}, {"name": "onViewCreated", "description": "Initializes MQTT ViewModel, sets up UI event listeners, and binds data observers after the view is created."}, {"name": "initIfNeeded", "description": "Initializes the MQTT manager if it hasn't been initialized yet."}, {"name": "onCleared", "description": "Cleans up resources when ViewModel is destroyed, disconnecting MQTT if needed."}, {"name": "onResume", "description": "Ensures the ViewModel is properly initialized when fragment resumes."}], "calls": ["ViewModelProvider.get(MqttVM::class.java)", "inflater.inflate(R.layout.fragment_mqtt, container, false)", "requireActivity()", "view.findViewById", "vm.logs.observe", "vm.connected.observe", "ConfigStore.requireContext()", "ConfigStore.load()", "vm.manager.applyConfig", "vm.manager.connect", "vm.manager.disconnect", "vm.manager.subscribe", "vm.manager.unsubscribe", "vm.manager.publish", "context.applicationContext", "super.onCleared", "requireContext()", "super.onResume()"], "search-terms": ["MQTTFragment", "mqtt", "mqtt controls", "connect/disconnect", "subscribe/unsubscribe", "publish", "logs", "MqttManager", "ViewModelProvider", "UI fragment"], "state": 2, "file_id": 24, "knowledge_revision": 57, "git_revision": "", "revision_history": [{"49": ""}, {"57": ""}], "hash": "c93823f04f22f9159ef39ef5d7078abf", "format-version": 4, "code-base-name": "usp_controller_frontend", "filename": "usp_controller_frontend/app/src/main/kotlin/org/example/app/ui/MQTTFragment.kt"}